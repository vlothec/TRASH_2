distnces_window_B
distances
distances
kmer_starts
distances <- NULL
kmer_starts <- NULL
for (i in seq_along(collapsed_kmers)) {
collapsed_kmers[[i]]$distances = (collapsed_kmers[[i]]$locations[2:length(collapsed_kmers[[i]]$locations)] -
collapsed_kmers[[i]]$locations[1:(length(collapsed_kmers[[i]]$locations)-1)])
collapsed_kmers[[i]]$distances = collapsed_kmers[[i]]$distances[collapsed_kmers[[i]]$distances <= max_repeat]
distances <- c(distances, collapsed_kmers[[i]]$distances)
kmer_starts <- c(kmer_starts, collapsed_kmers[[i]]$locations[1:(length(collapsed_kmers[[i]]$locations)-1)])
}
distances
kmer_starts
distances
distances <- NULL
kmer_starts <- NULL
for (i in seq_along(collapsed_kmers)) {
collapsed_kmers[[i]]$distances = (collapsed_kmers[[i]]$locations[2:length(collapsed_kmers[[i]]$locations)] -
collapsed_kmers[[i]]$locations[1:(length(collapsed_kmers[[i]]$locations)-1)])
kmer_starts <- c(kmer_starts, collapsed_kmers[[i]]$locations[1:(length(collapsed_kmers[[i]]$locations)-1)])
distances <- c(distances, collapsed_kmers[[i]]$distances)
collapsed_kmers[[i]]$distances = collapsed_kmers[[i]]$distances[collapsed_kmers[[i]]$distances <= max_repeat]
}
kmer_starts
distances
window_starts = NULL
window_ends = NULL
window_starts <- genomic_bins_starts(start = start, end = end, bin_size = window_size)
if (length(window_starts) < 2) {
window_ends <- end
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), end)
}
if (length(window_ends) != length(window_starts)) window_ends <- end
window_top_1_distance <- rep(0, length(window_starts))
window_top_2_distance <- rep(0, length(window_starts))
window_top_3_distance <- rep(0, length(window_starts))
window_top_4_distance <- rep(0, length(window_starts))
window_top_5_distance <- rep(0, length(window_starts))
window_count <- rep(0, length(window_starts))
for (i in seq_along(window_starts)) {
window_count[i] <- length(which(kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]))
window_distances <- table(distances[which(kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i])])
window_distances <- window_distances[order(window_distances, decreasing = TRUE)]
window_top_1_distance[i] <- if(length(as.numeric(names(window_distances)[1])) == 0) 0 else as.numeric(names(window_distances)[1])
window_top_2_distance[i] <- if(length(as.numeric(names(window_distances)[2])) == 0) 0 else as.numeric(names(window_distances)[2])
window_top_3_distance[i] <- if(length(as.numeric(names(window_distances)[3])) == 0) 0 else as.numeric(names(window_distances)[3])
window_top_4_distance[i] <- if(length(as.numeric(names(window_distances)[4])) == 0) 0 else as.numeric(names(window_distances)[4])
window_top_5_distance[i] <- if(length(as.numeric(names(window_distances)[5])) == 0) 0 else as.numeric(names(window_distances)[5])
}
connected_next_windows <- rep(0, length(window_starts))
for(i in 1 : (length(window_starts) - 1)) {
next_distances = c(window_top_1_distance[i + 1], window_top_2_distance[i + 1], window_top_3_distance[i + 1], window_top_4_distance[i + 1], window_top_5_distance[i + 1])
next_distances = next_distances[!is.na(next_distances)]
next_distances = next_distances[next_distances != 0]
if(length(next_distances) == 0) next
connected_next_windows[i] <- connected_next_windows[i] + score_weight_similar_count * ((abs(window_count[i] - window_count[i + 1]) / (max(window_count[i], window_count[i + 1]) + 1)) < max_window_count_percentage_to_score)
connected_next_windows[i] <- connected_next_windows[i] + score_weight_similar_top_distance * (window_top_1_distance[i] %in% next_distances)
connected_next_windows[i] <- connected_next_windows[i] + score_weight_similar_top_distance * (window_top_2_distance[i] %in% next_distances)
connected_next_windows[i] <- connected_next_windows[i] + score_weight_similar_top_distance * (window_top_3_distance[i] %in% next_distances)
connected_next_windows[i] <- connected_next_windows[i] + score_weight_similar_top_distance * (window_top_4_distance[i] %in% next_distances)
connected_next_windows[i] <- connected_next_windows[i] + score_weight_similar_top_distance * (window_top_5_distance[i] %in% next_distances)
}
connected_next_windows[length(connected_next_windows)] = score_weight_similar_count + 5 * score_weight_similar_top_distance
array_breaks_estimate_starts = window_starts[connected_next_windows <= array_break_max_threshold]
array_breaks_estimate_ends = window_ends[connected_next_windows <= array_break_max_threshold]
array_breaks_estimate_starts_temp = array_breaks_estimate_starts
array_breaks_estimate_starts = array_breaks_estimate_starts[!((array_breaks_estimate_starts-1) %in% array_breaks_estimate_ends)]
array_breaks_estimate_ends = array_breaks_estimate_ends[!((array_breaks_estimate_ends+1) %in% array_breaks_estimate_starts_temp)]
connected_next_windows
array_breaks_estimate_starts
array_breaks_estimate_ends
window_size = 1000
window_step = 100
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in 1 : seq_along(window_starts_compare)) {
distnces_window_A = distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]
distnces_window_B = distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]
}
distnces_window_A
distnces_window_B
window_size = 1000
window_step = 100
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
distnces_window_A
distnces_window_B
i=30
distnces_window_A = distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]
distnces_window_B = distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]
distnces_window_A
distnces_window_B
distnces_window_A = table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]])
distnces_window_B = table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]])
distnces_window_A
distnces_window_B
distnces_window_A = sort(table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]), decreasing = TRUE)
distnces_window_B = sort(table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]), decreasing = TRUE)
distnces_window_A
distnces_window_B
kmers_list
kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_A
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
kmers_window_A %in% kmers_window_B
sum(kmers_window_A %in% kmers_window_B)
for(i in 1 : seq_along(window_starts_compare)) {
# distnces_window_A = sort(table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]), decreasing = TRUE)
# distnces_window_B = sort(table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]), decreasing = TRUE)
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
sum(kmers_window_A %in% kmers_window_B)
seq_along(window_starts_compare)
for(i in seq_along(window_starts_compare)) {
# distnces_window_A = sort(table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]), decreasing = TRUE)
# distnces_window_B = sort(table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]), decreasing = TRUE)
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
windows_comparison_score
plot(windows_comparison_score)
window_size = 1000
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
# distnces_window_A = sort(table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]), decreasing = TRUE)
# distnces_window_B = sort(table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]), decreasing = TRUE)
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 500
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
# distnces_window_A = sort(table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]), decreasing = TRUE)
# distnces_window_B = sort(table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]), decreasing = TRUE)
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 2000
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
# distnces_window_A = sort(table(distances[kmer_starts >= window_starts[i] & kmer_starts <= window_ends[i]]), decreasing = TRUE)
# distnces_window_B = sort(table(distances[kmer_starts >= window_starts_compare[i] & kmer_starts <= window_ends_compare[i]]), decreasing = TRUE)
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_starts
window_size = 2000
window_step = 200
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 2000
window_step = 100
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 2000
window_step = 10
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 2000
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 4000
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
window_size = 1000
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B)
}
plot(windows_comparison_score)
diff(diff(windows_comparison_score))
plot(diff(diff(windows_comparison_score)))
plot(diff(windows_comparison_score,differences=2))
plot(diff(windows_comparison_score,differences=1))
plot(diff(windows_comparison_score,differences=10))
plot(diff(windows_comparison_score,differences=100))
plot(diff(windows_comparison_score,differences=50))
plot(windows_comparison_score)
ma <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 2)}
plot(ma(windows_comparison_score))
plot(diff(ma(windows_comparison_score),differences=50))
plot(diff(ma(windows_comparison_score),differences=2))
plot(diff(ma(windows_comparison_score),differences=1))
plot(ma(windows_comparison_score))
ma(windows_comparison_score)
ma(windows_comparison_score)[ma(windows_comparison_score) < 10]
ma(windows_comparison_score) < 10
ma(windows_comparison_score)
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B) / window_size
}
plot(windows_comparison_score)
plot(windows_comparison_score)
ma <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 2)}
plot(ma(windows_comparison_score))
ma(windows_comparison_score)[ma(windows_comparison_score) < 0.1]
ma(windows_comparison_score)
window_size = 2000
window_step = 50
window_starts = NULL
window_ends = NULL
window_ends_compare = NULL
window_starts <- genomic_bins_starts(start = start, end = (end - window_size), bin_size = window_step)
if (length(window_starts) < 2) {
window_ends <- (end - window_size)
} else {
window_ends <- c((window_starts[2:length(window_starts)] - 1), (end - window_size))
}
if (length(window_ends) != length(window_starts)) window_ends <- (end - window_size)
window_ends = window_ends + window_size - window_step
window_ends[window_ends > (end - window_size)] = (end - window_size)
window_starts_compare = window_ends + 1
if (length(window_starts_compare) < 2) {
window_ends_compare <- end
} else {
window_ends_compare <- c((window_starts_compare[2:length(window_starts_compare)] - 1), end)
}
if (length(window_ends_compare) != length(window_starts_compare)) window_ends_compare <- end
window_ends_compare = window_ends_compare + window_size - window_step
window_ends_compare[window_ends_compare > end] = end
windows_comparison_score <- rep(0, length(window_starts))
for(i in seq_along(window_starts_compare)) {
kmers_window_A = kmers_list[window_starts[i] : window_ends[i]]
kmers_window_B = kmers_list[window_starts_compare[i] : window_ends_compare[i]]
windows_comparison_score[i] = sum(kmers_window_A %in% kmers_window_B) / window_size
}
plot(windows_comparison_score)
ma <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 2)}
plot(ma(windows_comparison_score))
ma(windows_comparison_score)[ma(windows_comparison_score) < 0.1]
ma(windows_comparison_score)
plot(windows_comparison_score)
windows_comparison_score
